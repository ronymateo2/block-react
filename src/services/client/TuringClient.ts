/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.4.0 (NJsonSchema v9.13.36.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';

export class TuringClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl ? baseUrl : "https://";
    }

    /**
     * Get Departments
     * @return A Array of Object Department
     */
    departmentsAll(): Promise<Department[]> {
        let url_ = this.baseUrl + "/departments";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDepartmentsAll(_response);
        });
    }

    protected processDepartmentsAll(response: AxiosResponse): Promise<Department[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Department.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Department[]>(<any>null);
    }

    /**
     * Get Department by ID
     * @param department_id ID of Department
     * @return A object of Department
     */
    departments(department_id: number): Promise<Department> {
        let url_ = this.baseUrl + "/departments/{department_id}";
        if (department_id === undefined || department_id === null)
            throw new Error("The parameter 'department_id' must be defined.");
        url_ = url_.replace("{department_id}", encodeURIComponent("" + department_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDepartments(_response);
        });
    }

    protected processDepartments(response: AxiosResponse): Promise<Department> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Department.fromJS(resultData200) : new Department();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Department>(<any>null);
    }

    /**
     * Get All Taxes
     * @return A Array of Object Tax
     */
    taxAll(): Promise<Anonymous[]> {
        let url_ = this.baseUrl + "/tax";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTaxAll(_response);
        });
    }

    protected processTaxAll(response: AxiosResponse): Promise<Anonymous[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous[]>(<any>null);
    }

    /**
     * Get Tax by ID
     * @param tax_id ID of Tax
     * @return A object of Tax
     */
    tax(tax_id: number): Promise<Anonymous2> {
        let url_ = this.baseUrl + "/tax/{tax_id}";
        if (tax_id === undefined || tax_id === null)
            throw new Error("The parameter 'tax_id' must be defined.");
        url_ = url_.replace("{tax_id}", encodeURIComponent("" + tax_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTax(_response);
        });
    }

    protected processTax(response: AxiosResponse): Promise<Anonymous2> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous2>(<any>null);
    }

    /**
     * Get Categories
     * @param order (optional) Sorting a field. Allowed fields: 'category_id', 'name'.
     * @param page (optional) Inform the page. Starting with 1. Default: 1
     * @param limit (optional) Limit per page, Default: 20.
     * @return Return a list with count (total categories) and the rows of Categories
     */
    categories(order?: string | null | undefined, page?: number | null | undefined, limit?: number | null | undefined): Promise<Anonymous3> {
        let url_ = this.baseUrl + "/categories?";
        if (order !== undefined)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCategories(_response);
        });
    }

    protected processCategories(response: AxiosResponse): Promise<Anonymous3> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous3>(<any>null);
    }

    /**
     * Get Category by ID
     * @param category_id ID of Category
     * @return Return a object of Category
     */
    categories2(category_id: number): Promise<Category> {
        let url_ = this.baseUrl + "/categories/{category_id}";
        if (category_id === undefined || category_id === null)
            throw new Error("The parameter 'category_id' must be defined.");
        url_ = url_.replace("{category_id}", encodeURIComponent("" + category_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCategories2(_response);
        });
    }

    protected processCategories2(response: AxiosResponse): Promise<Category> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Category.fromJS(resultData200) : new Category();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Category>(<any>null);
    }

    /**
     * Get Categories of a Product
     * @param product_id ID of Product
     * @return Return a array of Category Objects
     */
    inProductAll(product_id: number): Promise<CategoryBasic[]> {
        let url_ = this.baseUrl + "/categories/inProduct/{product_id}";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInProductAll(_response);
        });
    }

    protected processInProductAll(response: AxiosResponse): Promise<CategoryBasic[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CategoryBasic.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CategoryBasic[]>(<any>null);
    }

    /**
     * Get Categories of a Department
     * @param department_id ID of Department
     * @return Return a array of Object Category
     */
    inDepartmentAll(department_id: number): Promise<Category[]> {
        let url_ = this.baseUrl + "/categories/inDepartment/{department_id}";
        if (department_id === undefined || department_id === null)
            throw new Error("The parameter 'department_id' must be defined.");
        url_ = url_.replace("{department_id}", encodeURIComponent("" + department_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInDepartmentAll(_response);
        });
    }

    protected processInDepartmentAll(response: AxiosResponse): Promise<Category[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Category.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Category[]>(<any>null);
    }

    /**
     * Get All Products
     * @param page (optional) Inform the page. Starting with 1. Default: 1
     * @param limit (optional) Limit per page, Default: 20.
     * @param description_length (optional) Limit of the description, Default: 200.
     * @return Return the total of products and a list of Products in row.
     */
    products(page?: number | null | undefined, limit?: number | null | undefined, description_length?: number | null | undefined): Promise<Anonymous4> {
        let url_ = this.baseUrl + "/products?";
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (description_length !== undefined)
            url_ += "description_length=" + encodeURIComponent("" + description_length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processProducts(_response);
        });
    }

    protected processProducts(response: AxiosResponse): Promise<Anonymous4> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous4>(<any>null);
    }

    /**
     * Search products
     * @param query_string Query to search.
     * @param all_words (optional) All words or no. Default: on
     * @param page (optional) Inform the page. Starting with 1. Default: 1
     * @param limit (optional) Limit per page, Default: 20.
     * @param description_length (optional) Limit of the description, Default: 200.
     * @return Return the total of products and a list of products.
     */
    search(query_string: string, all_words?: All_words | null | undefined, page?: number | null | undefined, limit?: number | null | undefined, description_length?: number | null | undefined): Promise<Anonymous5> {
        let url_ = this.baseUrl + "/products/search?";
        if (query_string === undefined || query_string === null)
            throw new Error("The parameter 'query_string' must be defined and cannot be null.");
        else
            url_ += "query_string=" + encodeURIComponent("" + query_string) + "&";
        if (all_words !== undefined)
            url_ += "all_words=" + encodeURIComponent("" + all_words) + "&";
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (description_length !== undefined)
            url_ += "description_length=" + encodeURIComponent("" + description_length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: AxiosResponse): Promise<Anonymous5> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous5>(<any>null);
    }

    /**
     * Product by ID
     * @param product_id Product ID
     * @return Return a Product Object
     */
    products2(product_id: number): Promise<ProductComplete> {
        let url_ = this.baseUrl + "/products/{product_id}";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processProducts2(_response);
        });
    }

    protected processProducts2(response: AxiosResponse): Promise<ProductComplete> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? ProductComplete.fromJS(resultData200) : new ProductComplete();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductComplete>(<any>null);
    }

    /**
     * Get a lit of Products of Categories
     * @param category_id Category ID
     * @param page (optional) Inform the page. Starting with 1.
     * @param limit (optional) Limit per page.
     * @param description_length (optional) Limit to description.
     * @return Return a list of Product Objects
     */
    inCategory(category_id: number, page?: number | null | undefined, limit?: number | null | undefined, description_length?: number | null | undefined): Promise<Anonymous6> {
        let url_ = this.baseUrl + "/products/inCategory/{category_id}?";
        if (category_id === undefined || category_id === null)
            throw new Error("The parameter 'category_id' must be defined.");
        url_ = url_.replace("{category_id}", encodeURIComponent("" + category_id));
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (description_length !== undefined)
            url_ += "description_length=" + encodeURIComponent("" + description_length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInCategory(_response);
        });
    }

    protected processInCategory(response: AxiosResponse): Promise<Anonymous6> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if ([200,201].includes(status)) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous6>(<any>null);
    }

    /**
     * Get a list of Products on Department
     * @param department_id Department ID
     * @param page (optional) Inform the page. Starting with 1.
     * @param limit (optional) Limit per page.
     * @param description_length (optional) Limit to description.
     * @return Return the total and a list of products
     */
    inDepartment(department_id: number, page?: number | null | undefined, limit?: number | null | undefined, description_length?: number | null | undefined): Promise<Anonymous7> {
        let url_ = this.baseUrl + "/products/inDepartment/{department_id}?";
        if (department_id === undefined || department_id === null)
            throw new Error("The parameter 'department_id' must be defined.");
        url_ = url_.replace("{department_id}", encodeURIComponent("" + department_id));
        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (description_length !== undefined)
            url_ += "description_length=" + encodeURIComponent("" + description_length) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInDepartment(_response);
        });
    }

    protected processInDepartment(response: AxiosResponse): Promise<Anonymous7> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous7>(<any>null);
    }

    /**
     * Get details of a Product
     * @param product_id Product ID
     * @return Return a Object of Products
     */
    details(product_id: number): Promise<ProductDetail> {
        let url_ = this.baseUrl + "/products/{product_id}/details";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processDetails(_response);
        });
    }

    protected processDetails(response: AxiosResponse): Promise<ProductDetail> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? ProductDetail.fromJS(resultData200) : new ProductDetail();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductDetail>(<any>null);
    }

    /**
     * Get locations of a Product
     * @param product_id Product ID
     * @return Return locations of products.
     */
    locations(product_id: number): Promise<ProductLocations> {
        let url_ = this.baseUrl + "/products/{product_id}/locations";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLocations(_response);
        });
    }

    protected processLocations(response: AxiosResponse): Promise<ProductLocations> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? ProductLocations.fromJS(resultData200) : new ProductLocations();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductLocations>(<any>null);
    }

    /**
     * Get reviews of a Product
     * @param product_id Product ID
     * @return Return a list of reviews
     */
    reviewsAll(product_id: number): Promise<Review[]> {
        let url_ = this.baseUrl + "/products/{product_id}/reviews";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processReviewsAll(_response);
        });
    }

    protected processReviewsAll(response: AxiosResponse): Promise<Review[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Review.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Review[]>(<any>null);
    }

    /**
     * @param product_id Product ID
     * @param review Review Text of Product
     * @param rating Rating of Product
     * @return No data.
     */
    reviews(product_id: number, review: string, rating: number): Promise<void> {
        let url_ = this.baseUrl + "/products/{product_id}/reviews";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (review === undefined || review === null)
            throw new Error("The parameter 'review' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("review") + "=" + encodeURIComponent("" + review) + "&";
        if (rating === undefined || rating === null)
            throw new Error("The parameter 'rating' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("rating") + "=" + encodeURIComponent("" + rating) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processReviews(_response);
        });
    }

    protected processReviews(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Update a customer
     * @param name Customer name.
     * @param email Customer email.
     * @param password (optional) Customer password.
     * @param day_phone (optional) Customer day phone.
     * @param eve_phone (optional) Customer eve phone.
     * @param mob_phone (optional) Customer mob phone.
     * @return A Customer Object
     */
    customer(name: string, email: string, password?: string | null | undefined, day_phone?: string | null | undefined, eve_phone?: string | null | undefined, mob_phone?: string | null | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/customer";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("name") + "=" + encodeURIComponent("" + name) + "&";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("email") + "=" + encodeURIComponent("" + email) + "&";
        if (password !== undefined)
            content_ += encodeURIComponent("password") + "=" + encodeURIComponent("" + password) + "&";
        if (day_phone !== undefined)
            content_ += encodeURIComponent("day_phone") + "=" + encodeURIComponent("" + day_phone) + "&";
        if (eve_phone !== undefined)
            content_ += encodeURIComponent("eve_phone") + "=" + encodeURIComponent("" + eve_phone) + "&";
        if (mob_phone !== undefined)
            content_ += encodeURIComponent("mob_phone") + "=" + encodeURIComponent("" + mob_phone) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCustomer(_response);
        });
    }

    protected processCustomer(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Customer.fromJS(resultData200) : new Customer();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(<any>null);
    }

    /**
     * Get a customer by ID. The customer is getting by Token.
     * @return Return a Object of Customer with auth credencials
     */
    customer2(): Promise<Customer> {
        let url_ = this.baseUrl + "/customer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCustomer2(_response);
        });
    }

    protected processCustomer2(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Customer.fromJS(resultData200) : new Customer();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(<any>null);
    }

    /**
     * Register a Customer
     * @param name Name of User.
     * @param email Email of User.
     * @param password Password of User.
     * @return Return a Object of Customer with auth credencials
     */
    customers(name: string, email: string, password: string): Promise<CustomerRegister> {
        let url_ = this.baseUrl + "/customers";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("name") + "=" + encodeURIComponent("" + name) + "&";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("email") + "=" + encodeURIComponent("" + email) + "&";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("password") + "=" + encodeURIComponent("" + password) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCustomers(_response);
        });
    }

    protected processCustomers(response: AxiosResponse): Promise<CustomerRegister> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? CustomerRegister.fromJS(resultData200) : new CustomerRegister();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerRegister>(<any>null);
    }

    /**
     * Sign in in the Shopping.
     * @param email Email of User.
     * @param password Password of User.
     * @return Return a Object of Customer with auth credencials
     */
    login(email: string, password: string): Promise<CustomerRegister> {
        let url_ = this.baseUrl + "/customers/login";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("email") + "=" + encodeURIComponent("" + email) + "&";
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("password") + "=" + encodeURIComponent("" + password) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<CustomerRegister> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? CustomerRegister.fromJS(resultData200) : new CustomerRegister();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerRegister>(<any>null);
    }

    /**
     * Sign in with a facebook login token.
     * @param access_token Token generated from your facebook login.
     * @return Return a Object of Customer with auth credencials
     */
    facebook(access_token: string): Promise<CustomerRegister> {
        let url_ = this.baseUrl + "/customers/facebook";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (access_token === undefined || access_token === null)
            throw new Error("The parameter 'access_token' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("access_token") + "=" + encodeURIComponent("" + access_token) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processFacebook(_response);
        });
    }

    protected processFacebook(response: AxiosResponse): Promise<CustomerRegister> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? CustomerRegister.fromJS(resultData200) : new CustomerRegister();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CustomerRegister>(<any>null);
    }

    /**
     * Update the address from customer
     * @param address_1 Address 1
     * @param city City
     * @param region Region
     * @param postal_code Postal Code
     * @param country Country
     * @param shipping_region_id Shipping Region ID
     * @param address_2 (optional) Address 2
     * @return Return a Customer Object
     */
    address(address_1: string, city: string, region: string, postal_code: string, country: string, shipping_region_id: number, address_2?: string | null | undefined): Promise<Customer> {
        let url_ = this.baseUrl + "/customers/address";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (address_1 === undefined || address_1 === null)
            throw new Error("The parameter 'address_1' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("address_1") + "=" + encodeURIComponent("" + address_1) + "&";
        if (city === undefined || city === null)
            throw new Error("The parameter 'city' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("city") + "=" + encodeURIComponent("" + city) + "&";
        if (region === undefined || region === null)
            throw new Error("The parameter 'region' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("region") + "=" + encodeURIComponent("" + region) + "&";
        if (postal_code === undefined || postal_code === null)
            throw new Error("The parameter 'postal_code' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("postal_code") + "=" + encodeURIComponent("" + postal_code) + "&";
        if (country === undefined || country === null)
            throw new Error("The parameter 'country' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("country") + "=" + encodeURIComponent("" + country) + "&";
        if (shipping_region_id === undefined || shipping_region_id === null)
            throw new Error("The parameter 'shipping_region_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("shipping_region_id") + "=" + encodeURIComponent("" + shipping_region_id) + "&";
        if (address_2 !== undefined)
            content_ += encodeURIComponent("address_2") + "=" + encodeURIComponent("" + address_2) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAddress(_response);
        });
    }

    protected processAddress(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Customer.fromJS(resultData200) : new Customer();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(<any>null);
    }

    /**
     * Update the address from customer
     * @param credit_card Credit Card.
     * @return Return a Customer Object.
     */
    creditCard(credit_card: string): Promise<Customer> {
        let url_ = this.baseUrl + "/customers/creditCard";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (credit_card === undefined || credit_card === null)
            throw new Error("The parameter 'credit_card' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("credit_card") + "=" + encodeURIComponent("" + credit_card) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCreditCard(_response);
        });
    }

    protected processCreditCard(response: AxiosResponse): Promise<Customer> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Customer.fromJS(resultData200) : new Customer();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Customer>(<any>null);
    }

    /**
     * Generete the unique CART ID
     * @return Json Object with unique Cart ID
     */
    generateUniqueId(): Promise<Anonymous8> {
        let url_ = this.baseUrl + "/shoppingcart/generateUniqueId";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGenerateUniqueId(_response);
        });
    }

    protected processGenerateUniqueId(response: AxiosResponse): Promise<Anonymous8> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 ? Anonymous8.fromJS(resultData200) : new Anonymous8();
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous8>(<any>null);
    }

    /**
     * Add a Product in the cart
     * @param cart_id Cart ID.
     * @param product_id Product ID.
     * @param attributes Attributes of Product.
     * @return Return a array of products in the cart
     */
    add(cart_id: string, product_id: number, attributes: string): Promise<CartWithProduct[]> {
        let url_ = this.baseUrl + "/shoppingcart/add";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("cart_id") + "=" + encodeURIComponent("" + cart_id) + "&";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("product_id") + "=" + encodeURIComponent("" + product_id) + "&";
        if (attributes === undefined || attributes === null)
            throw new Error("The parameter 'attributes' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("attributes") + "=" + encodeURIComponent("" + attributes) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAdd(_response);
        });
    }

    protected processAdd(response: AxiosResponse): Promise<CartWithProduct[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CartWithProduct.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CartWithProduct[]>(<any>null);
    }

    /**
     * Get List of Products in Shopping Cart
     * @param cart_id Cart ID.
     * @return Return a array of products in the cart.
     */
    shoppingcart(cart_id: string): Promise<Cart[]> {
        let url_ = this.baseUrl + "/shoppingcart/{cart_id}";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined.");
        url_ = url_.replace("{cart_id}", encodeURIComponent("" + cart_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processShoppingcart(_response);
        });
    }

    protected processShoppingcart(response: AxiosResponse): Promise<Cart[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Cart.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Cart[]>(<any>null);
    }

    /**
     * Update the cart by item
     * @param item_id Item ID.
     * @param quantity Item Quantity.
     * @return Return a array of products in the cart.
     */
    update(item_id: number, quantity: number): Promise<Cart[]> {
        let url_ = this.baseUrl + "/shoppingcart/update/{item_id}";
        if (item_id === undefined || item_id === null)
            throw new Error("The parameter 'item_id' must be defined.");
        url_ = url_.replace("{item_id}", encodeURIComponent("" + item_id));
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (quantity === undefined || quantity === null)
            throw new Error("The parameter 'quantity' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("quantity") + "=" + encodeURIComponent("" + quantity) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: AxiosResponse): Promise<Cart[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Cart.fromJS(item));
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Cart[]>(<any>null);
    }

    /**
     * Empty cart
     * @param cart_id Cart ID.
     * @return Return a empty Array
     */
    empty(cart_id: string): Promise<void> {
        let url_ = this.baseUrl + "/shoppingcart/empty/{cart_id}";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined.");
        url_ = url_.replace("{cart_id}", encodeURIComponent("" + cart_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processEmpty(_response);
        });
    }

    protected processEmpty(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Move a product to cart
     * @param item_id Item ID.
     * @return No data.
     */
    moveToCart(item_id: number): Promise<void> {
        let url_ = this.baseUrl + "/shoppingcart/moveToCart/{item_id}";
        if (item_id === undefined || item_id === null)
            throw new Error("The parameter 'item_id' must be defined.");
        url_ = url_.replace("{item_id}", encodeURIComponent("" + item_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processMoveToCart(_response);
        });
    }

    protected processMoveToCart(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Return a total Amount from Cart
     * @param cart_id Cart ID.
     * @return Return the total amount
     */
    totalAmount(cart_id: string): Promise<Anonymous9> {
        let url_ = this.baseUrl + "/shoppingcart/totalAmount/{cart_id}";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined.");
        url_ = url_.replace("{cart_id}", encodeURIComponent("" + cart_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processTotalAmount(_response);
        });
    }

    protected processTotalAmount(response: AxiosResponse): Promise<Anonymous9> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous9>(<any>null);
    }

    /**
     * Save a Product for latter
     * @param item_id Item ID.
     * @return No data.
     */
    saveForLater(item_id: number): Promise<void> {
        let url_ = this.baseUrl + "/shoppingcart/saveForLater/{item_id}";
        if (item_id === undefined || item_id === null)
            throw new Error("The parameter 'item_id' must be defined.");
        url_ = url_.replace("{item_id}", encodeURIComponent("" + item_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processSaveForLater(_response);
        });
    }

    protected processSaveForLater(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get Products saved for latter
     * @param cart_id Cart ID.
     * @return Return a object of item salved.
     */
    getSaved(cart_id: string): Promise<Anonymous10> {
        let url_ = this.baseUrl + "/shoppingcart/getSaved/{cart_id}";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined.");
        url_ = url_.replace("{cart_id}", encodeURIComponent("" + cart_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processGetSaved(_response);
        });
    }

    protected processGetSaved(response: AxiosResponse): Promise<Anonymous10> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous10>(<any>null);
    }

    /**
     * Remove a product in the cart
     * @param item_id Item ID.
     * @return No data.
     */
    removeProduct(item_id: number): Promise<void> {
        let url_ = this.baseUrl + "/shoppingcart/removeProduct/{item_id}";
        if (item_id === undefined || item_id === null)
            throw new Error("The parameter 'item_id' must be defined.");
        url_ = url_.replace("{item_id}", encodeURIComponent("" + item_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRemoveProduct(_response);
        });
    }

    protected processRemoveProduct(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Create a Order
     * @param cart_id Cart ID
     * @param shipping_id Shipping ID
     * @param tax_id Tax ID
     * @return Return the Order ID
     */
    orders(cart_id: string, shipping_id: number, tax_id: number): Promise<Anonymous11> {
        let url_ = this.baseUrl + "/orders";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (cart_id === undefined || cart_id === null)
            throw new Error("The parameter 'cart_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("cart_id") + "=" + encodeURIComponent("" + cart_id) + "&";
        if (shipping_id === undefined || shipping_id === null)
            throw new Error("The parameter 'shipping_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("shipping_id") + "=" + encodeURIComponent("" + shipping_id) + "&";
        if (tax_id === undefined || tax_id === null)
            throw new Error("The parameter 'tax_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("tax_id") + "=" + encodeURIComponent("" + tax_id) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processOrders(_response);
        });
    }

    protected processOrders(response: AxiosResponse): Promise<Anonymous11> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous11>(<any>null);
    }

    /**
     * Get Info about Order
     * @param order_id Order ID
     * @return Return a object of Order.
     */
    orders2(order_id: number): Promise<Anonymous12> {
        let url_ = this.baseUrl + "/orders/{order_id}";
        if (order_id === undefined || order_id === null)
            throw new Error("The parameter 'order_id' must be defined.");
        url_ = url_.replace("{order_id}", encodeURIComponent("" + order_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processOrders2(_response);
        });
    }

    protected processOrders2(response: AxiosResponse): Promise<Anonymous12> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = resultData404 ? NotFound.fromJS(resultData404) : new NotFound();
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous12>(<any>null);
    }

    /**
     * Get orders by Customer
     * @return Return a array of Orders
     */
    inCustomer(): Promise<void> {
        let url_ = this.baseUrl + "/orders/inCustomer";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInCustomer(_response);
        });
    }

    protected processInCustomer(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Get Info about Order
     * @param order_id Order ID
     * @return Return a Object Order
     */
    shortDetail(order_id: number): Promise<Anonymous13> {
        let url_ = this.baseUrl + "/orders/shortDetail/{order_id}";
        if (order_id === undefined || order_id === null)
            throw new Error("The parameter 'order_id' must be defined.");
        url_ = url_.replace("{order_id}", encodeURIComponent("" + order_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processShortDetail(_response);
        });
    }

    protected processShortDetail(response: AxiosResponse): Promise<Anonymous13> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous13>(<any>null);
    }

    /**
     * Return shippings regions
     * @return Return a list of Shippings Regions
     */
    regionsAll(): Promise<Anonymous14[]> {
        let url_ = this.baseUrl + "/shipping/regions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegionsAll(_response);
        });
    }

    protected processRegionsAll(response: AxiosResponse): Promise<Anonymous14[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous14[]>(<any>null);
    }

    /**
     * Return shippings regions
     * @param shipping_region_id Shipping Region Id
     * @return Return a list of Object
     */
    regions(shipping_region_id: number): Promise<Anonymous15[]> {
        let url_ = this.baseUrl + "/shipping/regions/{shipping_region_id}";
        if (shipping_region_id === undefined || shipping_region_id === null)
            throw new Error("The parameter 'shipping_region_id' must be defined.");
        url_ = url_.replace("{shipping_region_id}", encodeURIComponent("" + shipping_region_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processRegions(_response);
        });
    }

    protected processRegions(response: AxiosResponse): Promise<Anonymous15[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous15[]>(<any>null);
    }

    /**
     * Get Attribute list
     * @return List of Attribute Objects
     */
    attributes(): Promise<Anonymous16> {
        let url_ = this.baseUrl + "/attributes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAttributes(_response);
        });
    }

    protected processAttributes(response: AxiosResponse): Promise<Anonymous16> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous16>(<any>null);
    }

    /**
     * Get Attribute list
     * @param attribute_id Attribute Id
     * @return Return a Object of Attribute
     */
    attributesAll(attribute_id: number): Promise<Anonymous17[]> {
        let url_ = this.baseUrl + "/attributes/{attribute_id}";
        if (attribute_id === undefined || attribute_id === null)
            throw new Error("The parameter 'attribute_id' must be defined.");
        url_ = url_.replace("{attribute_id}", encodeURIComponent("" + attribute_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processAttributesAll(_response);
        });
    }

    protected processAttributesAll(response: AxiosResponse): Promise<Anonymous17[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous17[]>(<any>null);
    }

    /**
     * Get Values Attribute from Atribute
     * @param attribute_id Attribute Id
     * @return Return a list of Attribute Values
     */
    values(attribute_id: number): Promise<Anonymous18> {
        let url_ = this.baseUrl + "/attributes/values/{attribute_id}";
        if (attribute_id === undefined || attribute_id === null)
            throw new Error("The parameter 'attribute_id' must be defined.");
        url_ = url_.replace("{attribute_id}", encodeURIComponent("" + attribute_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processValues(_response);
        });
    }

    protected processValues(response: AxiosResponse): Promise<Anonymous18> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous18>(<any>null);
    }

    /**
     * Get all Attributes with Produt ID
     * @param product_id Product Id
     * @return Return a array of Values of Attribute Objects
     */
    inProduct(product_id: number): Promise<Anonymous19[]> {
        let url_ = this.baseUrl + "/attributes/inProduct/{product_id}";
        if (product_id === undefined || product_id === null)
            throw new Error("The parameter 'product_id' must be defined.");
        url_ = url_.replace("{product_id}", encodeURIComponent("" + product_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processInProduct(_response);
        });
    }

    protected processInProduct(response: AxiosResponse): Promise<Anonymous19[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            return result200;
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anonymous19[]>(<any>null);
    }

    /**
     * This method receive a front-end payment and create a chage.
     * @param stripeToken The API token, you can use this example to get it: https://stripe.com/docs/stripe-js/elements/quickstart
     * @param order_id The order ID recorded before (Check the Order Documentation)
     * @param description Description to order.
     * @param amount Only numbers like: 999
     * @param currency (optional) Check here the options: https://stripe.com/docs/currencies, the default
     * @return Object from Stripe
     */
    charge(stripeToken: string, order_id: number, description: string, amount: number, currency?: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/stripe/charge";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (stripeToken === undefined || stripeToken === null)
            throw new Error("The parameter 'stripeToken' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("stripeToken") + "=" + encodeURIComponent("" + stripeToken) + "&";
        if (order_id === undefined || order_id === null)
            throw new Error("The parameter 'order_id' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("order_id") + "=" + encodeURIComponent("" + order_id) + "&";
        if (description === undefined || description === null)
            throw new Error("The parameter 'description' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("description") + "=" + encodeURIComponent("" + description) + "&";
        if (amount === undefined || amount === null)
            throw new Error("The parameter 'amount' must be defined and cannot be null.");
        else
            content_ += encodeURIComponent("amount") + "=" + encodeURIComponent("" + amount) + "&";
        if (currency !== undefined)
            content_ += encodeURIComponent("currency") + "=" + encodeURIComponent("" + currency) + "&";
        content_ = content_.replace(/&$/, "");

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processCharge(_response);
        });
    }

    protected processCharge(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = resultData400 ? ErrorDto.fromJS(resultData400) : new ErrorDto();
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = resultData401 ? Unauthorized.fromJS(resultData401) : new Unauthorized();
            return throwException("A server error occurred.", status, _responseText, _headers, result401);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Endpoint that provide a synchronization
     * @return This endpoint is used by Stripe.
     */
    webhooks(): Promise<void> {
        let url_ = this.baseUrl + "/stripe/webhooks";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            }
        };

        return this.instance.request(options_).then((_response: AxiosResponse) => {
            return this.processWebhooks(_response);
        });
    }

    protected processWebhooks(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach((v: any, k: any) => _headers[k] = v);
        };
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class Department implements IDepartment {
    department_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IDepartment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.department_id = data["department_id"];
            this.name = data["name"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): Department {
        data = typeof data === 'object' ? data : {};
        let result = new Department();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["department_id"] = this.department_id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IDepartment {
    department_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
}

export class Category implements ICategory {
    category_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    department_id?: number | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.category_id = data["category_id"];
            this.name = data["name"];
            this.description = data["description"];
            this.department_id = data["department_id"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category_id"] = this.category_id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["department_id"] = this.department_id;
        return data;
    }
}

export interface ICategory {
    category_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    department_id?: number | undefined;
}

export class CategoryBasic implements ICategoryBasic {
    category_id?: number | undefined;
    department_id?: number | undefined;
    name?: string | undefined;

    constructor(data?: ICategoryBasic) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.category_id = data["category_id"];
            this.department_id = data["department_id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CategoryBasic {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryBasic();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category_id"] = this.category_id;
        data["department_id"] = this.department_id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICategoryBasic {
    category_id?: number | undefined;
    department_id?: number | undefined;
    name?: string | undefined;
}

export class Product implements IProduct {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    thumbnail?: string | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.product_id = data["product_id"];
            this.name = data["name"];
            this.description = data["description"];
            this.price = data["price"];
            this.discounted_price = data["discounted_price"];
            this.thumbnail = data["thumbnail"];
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product_id"] = this.product_id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discounted_price"] = this.discounted_price;
        data["thumbnail"] = this.thumbnail;
        return data;
    }
}

export interface IProduct {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    thumbnail?: string | undefined;
}

export class ProductInDepartment implements IProductInDepartment {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    thumbnail?: string | undefined;
    display?: string | undefined;

    constructor(data?: IProductInDepartment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.product_id = data["product_id"];
            this.name = data["name"];
            this.description = data["description"];
            this.price = data["price"];
            this.discounted_price = data["discounted_price"];
            this.thumbnail = data["thumbnail"];
            this.display = data["display"];
        }
    }

    static fromJS(data: any): ProductInDepartment {
        data = typeof data === 'object' ? data : {};
        let result = new ProductInDepartment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product_id"] = this.product_id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discounted_price"] = this.discounted_price;
        data["thumbnail"] = this.thumbnail;
        data["display"] = this.display;
        return data;
    }
}

export interface IProductInDepartment {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    thumbnail?: string | undefined;
    display?: string | undefined;
}

export class ProductComplete implements IProductComplete {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    image?: string | undefined;
    image2?: string | undefined;
    thumbnail?: string | undefined;
    display?: number | undefined;

    constructor(data?: IProductComplete) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.product_id = data["product_id"];
            this.name = data["name"];
            this.description = data["description"];
            this.price = data["price"];
            this.discounted_price = data["discounted_price"];
            this.image = data["image"];
            this.image2 = data["image2"];
            this.thumbnail = data["thumbnail"];
            this.display = data["display"];
        }
    }

    static fromJS(data: any): ProductComplete {
        data = typeof data === 'object' ? data : {};
        let result = new ProductComplete();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product_id"] = this.product_id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discounted_price"] = this.discounted_price;
        data["image"] = this.image;
        data["image2"] = this.image2;
        data["thumbnail"] = this.thumbnail;
        data["display"] = this.display;
        return data;
    }
}

export interface IProductComplete {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    image?: string | undefined;
    image2?: string | undefined;
    thumbnail?: string | undefined;
    display?: number | undefined;
}

export class ProductDetail implements IProductDetail {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    image?: string | undefined;
    image2?: string | undefined;

    constructor(data?: IProductDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.product_id = data["product_id"];
            this.name = data["name"];
            this.description = data["description"];
            this.price = data["price"];
            this.discounted_price = data["discounted_price"];
            this.image = data["image"];
            this.image2 = data["image2"];
        }
    }

    static fromJS(data: any): ProductDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product_id"] = this.product_id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["discounted_price"] = this.discounted_price;
        data["image"] = this.image;
        data["image2"] = this.image2;
        return data;
    }
}

export interface IProductDetail {
    product_id?: number | undefined;
    name?: string | undefined;
    description?: string | undefined;
    price?: string | undefined;
    discounted_price?: string | undefined;
    image?: string | undefined;
    image2?: string | undefined;
}

export class ProductLocations implements IProductLocations {
    category_id?: number | undefined;
    category_name?: string | undefined;
    department_id?: number | undefined;
    department_name?: string | undefined;

    constructor(data?: IProductLocations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.category_id = data["category_id"];
            this.category_name = data["category_name"];
            this.department_id = data["department_id"];
            this.department_name = data["department_name"];
        }
    }

    static fromJS(data: any): ProductLocations {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLocations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["category_id"] = this.category_id;
        data["category_name"] = this.category_name;
        data["department_id"] = this.department_id;
        data["department_name"] = this.department_name;
        return data;
    }
}

export interface IProductLocations {
    category_id?: number | undefined;
    category_name?: string | undefined;
    department_id?: number | undefined;
    department_name?: string | undefined;
}

export class Review implements IReview {
    name?: string | undefined;
    review?: string | undefined;
    rating?: number | undefined;
    created_on?: string | undefined;

    constructor(data?: IReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.review = data["review"];
            this.rating = data["rating"];
            this.created_on = data["created_on"];
        }
    }

    static fromJS(data: any): Review {
        data = typeof data === 'object' ? data : {};
        let result = new Review();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["review"] = this.review;
        data["rating"] = this.rating;
        data["created_on"] = this.created_on;
        return data;
    }
}

export interface IReview {
    name?: string | undefined;
    review?: string | undefined;
    rating?: number | undefined;
    created_on?: string | undefined;
}

export class Customer implements ICustomer {
    customer_id?: number | undefined;
    name?: string | undefined;
    email?: string | undefined;
    address_1?: string | undefined;
    address_2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postal_code?: string | undefined;
    country?: string | undefined;
    shipping_region_id?: number | undefined;
    day_phone?: string | undefined;
    eve_phone?: string | undefined;
    mob_phone?: string | undefined;
    credit_card?: string | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customer_id = data["customer_id"];
            this.name = data["name"];
            this.email = data["email"];
            this.address_1 = data["address_1"];
            this.address_2 = data["address_2"];
            this.city = data["city"];
            this.region = data["region"];
            this.postal_code = data["postal_code"];
            this.country = data["country"];
            this.shipping_region_id = data["shipping_region_id"];
            this.day_phone = data["day_phone"];
            this.eve_phone = data["eve_phone"];
            this.mob_phone = data["mob_phone"];
            this.credit_card = data["credit_card"];
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer_id"] = this.customer_id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["address_1"] = this.address_1;
        data["address_2"] = this.address_2;
        data["city"] = this.city;
        data["region"] = this.region;
        data["postal_code"] = this.postal_code;
        data["country"] = this.country;
        data["shipping_region_id"] = this.shipping_region_id;
        data["day_phone"] = this.day_phone;
        data["eve_phone"] = this.eve_phone;
        data["mob_phone"] = this.mob_phone;
        data["credit_card"] = this.credit_card;
        return data;
    }
}

export interface ICustomer {
    customer_id?: number | undefined;
    name?: string | undefined;
    email?: string | undefined;
    address_1?: string | undefined;
    address_2?: string | undefined;
    city?: string | undefined;
    region?: string | undefined;
    postal_code?: string | undefined;
    country?: string | undefined;
    shipping_region_id?: number | undefined;
    day_phone?: string | undefined;
    eve_phone?: string | undefined;
    mob_phone?: string | undefined;
    credit_card?: string | undefined;
}

export class CustomerRegister implements ICustomerRegister {
    customer?: Customer2 | undefined;
    accessToken?: string | undefined;
    expires_in?: string | undefined;

    constructor(data?: ICustomerRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customer = data["customer"];
            this.accessToken = data["accessToken"];
            this.expires_in = data["expires_in"];
        }
    }

    static fromJS(data: any): CustomerRegister {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerRegister();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer;
        data["accessToken"] = this.accessToken;
        data["expires_in"] = this.expires_in;
        return data;
    }
}

export interface ICustomerRegister {
    customer?: Customer2 | undefined;
    accessToken?: string | undefined;
    expires_in?: string | undefined;
}

export class Cart implements ICart {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;
    quantity?: number | undefined;
    subtotal?: string | undefined;

    constructor(data?: ICart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.item_id = data["item_id"];
            this.name = data["name"];
            this.attributes = data["attributes"];
            this.price = data["price"];
            this.quantity = data["quantity"];
            this.subtotal = data["subtotal"];
        }
    }

    static fromJS(data: any): Cart {
        data = typeof data === 'object' ? data : {};
        let result = new Cart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item_id"] = this.item_id;
        data["name"] = this.name;
        data["attributes"] = this.attributes;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["subtotal"] = this.subtotal;
        return data;
    }
}

export interface ICart {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;
    quantity?: number | undefined;
    subtotal?: string | undefined;
}

export class CartWithProduct implements ICartWithProduct {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;
    quantity?: number | undefined;
    product_id?: number | undefined;
    subtotal?: string | undefined;

    constructor(data?: ICartWithProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.item_id = data["item_id"];
            this.name = data["name"];
            this.attributes = data["attributes"];
            this.price = data["price"];
            this.quantity = data["quantity"];
            this.product_id = data["product_id"];
            this.subtotal = data["subtotal"];
        }
    }

    static fromJS(data: any): CartWithProduct {
        data = typeof data === 'object' ? data : {};
        let result = new CartWithProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item_id"] = this.item_id;
        data["name"] = this.name;
        data["attributes"] = this.attributes;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["product_id"] = this.product_id;
        data["subtotal"] = this.subtotal;
        return data;
    }
}

export interface ICartWithProduct {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;
    quantity?: number | undefined;
    product_id?: number | undefined;
    subtotal?: string | undefined;
}

export class ErrorDto implements IErrorDto {
    code?: string | undefined;
    message?: string | undefined;
    field?: string | undefined;

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
            this.field = data["field"];
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["field"] = this.field;
        return data;
    }
}

export interface IErrorDto {
    code?: string | undefined;
    message?: string | undefined;
    field?: string | undefined;
}

export class Unauthorized implements IUnauthorized {
    code?: string | undefined;
    message?: string | undefined;
    field?: string | undefined;

    constructor(data?: IUnauthorized) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
            this.field = data["field"];
        }
    }

    static fromJS(data: any): Unauthorized {
        data = typeof data === 'object' ? data : {};
        let result = new Unauthorized();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["field"] = this.field;
        return data;
    }
}

export interface IUnauthorized {
    code?: string | undefined;
    message?: string | undefined;
    field?: string | undefined;
}

export class NotFound implements INotFound {
    message?: string | undefined;

    constructor(data?: INotFound) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.message = data["message"];
        }
    }

    static fromJS(data: any): NotFound {
        data = typeof data === 'object' ? data : {};
        let result = new NotFound();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface INotFound {
    message?: string | undefined;
}

/** All words or no. Default: on */
export enum All_words {
    On = "on",
    Off = "off",
}

export class Anonymous implements IAnonymous {
    tax_id?: number | undefined;
    tax_type?: string | undefined;
    tax_percentage?: string | undefined;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tax_id = data["tax_id"];
            this.tax_type = data["tax_type"];
            this.tax_percentage = data["tax_percentage"];
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tax_id"] = this.tax_id;
        data["tax_type"] = this.tax_type;
        data["tax_percentage"] = this.tax_percentage;
        return data;
    }
}

export interface IAnonymous {
    tax_id?: number | undefined;
    tax_type?: string | undefined;
    tax_percentage?: string | undefined;
}

export class Anonymous2 implements IAnonymous2 {
    tax_id?: number | undefined;
    tax_type?: string | undefined;
    tax_percentage?: string | undefined;

    constructor(data?: IAnonymous2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tax_id = data["tax_id"];
            this.tax_type = data["tax_type"];
            this.tax_percentage = data["tax_percentage"];
        }
    }

    static fromJS(data: any): Anonymous2 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tax_id"] = this.tax_id;
        data["tax_type"] = this.tax_type;
        data["tax_percentage"] = this.tax_percentage;
        return data;
    }
}

export interface IAnonymous2 {
    tax_id?: number | undefined;
    tax_type?: string | undefined;
    tax_percentage?: string | undefined;
}

export class Anonymous3 implements IAnonymous3 {
    count?: number | undefined;
    rows?: Category[] | undefined;

    constructor(data?: IAnonymous3) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.count = data["count"];
            if (data["rows"] && data["rows"].constructor === Array) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(Category.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous3 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous3();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (this.rows && this.rows.constructor === Array) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous3 {
    count?: number | undefined;
    rows?: Category[] | undefined;
}

export class Anonymous4 implements IAnonymous4 {
    count?: number | undefined;
    rows?: Product[] | undefined;

    constructor(data?: IAnonymous4) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.count = data["count"];
            if (data["rows"] && data["rows"].constructor === Array) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous4 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous4();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (this.rows && this.rows.constructor === Array) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous4 {
    count?: number | undefined;
    rows?: Product[] | undefined;
}

export class Anonymous5 implements IAnonymous5 {
    count?: number | undefined;
    rows?: Product[] | undefined;

    constructor(data?: IAnonymous5) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.count = data["count"];
            if (data["rows"] && data["rows"].constructor === Array) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous5 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous5();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (this.rows && this.rows.constructor === Array) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous5 {
    count?: number | undefined;
    rows?: Product[] | undefined;
}

export class Anonymous6 implements IAnonymous6 {
    count?: number | undefined;
    rows?: Product[] | undefined;

    constructor(data?: IAnonymous6) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.count = data["count"];
            if (data["rows"] && data["rows"].constructor === Array) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous6 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous6();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (this.rows && this.rows.constructor === Array) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous6 {
    count?: number | undefined;
    rows?: Product[] | undefined;
}

export class Anonymous7 implements IAnonymous7 {
    count?: number | undefined;
    rows?: ProductInDepartment[] | undefined;

    constructor(data?: IAnonymous7) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.count = data["count"];
            if (data["rows"] && data["rows"].constructor === Array) {
                this.rows = [] as any;
                for (let item of data["rows"])
                    this.rows!.push(ProductInDepartment.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Anonymous7 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous7();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["count"] = this.count;
        if (this.rows && this.rows.constructor === Array) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnonymous7 {
    count?: number | undefined;
    rows?: ProductInDepartment[] | undefined;
}

export class Anonymous8 implements IAnonymous8 {
    cart_id?: string | undefined;

    constructor(data?: IAnonymous8) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.cart_id = data["cart_id"];
        }
    }

    static fromJS(data: any): Anonymous8 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous8();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cart_id"] = this.cart_id;
        return data;
    }
}

export interface IAnonymous8 {
    cart_id?: string | undefined;
}

export class Anonymous9 implements IAnonymous9 {
    total_amount?: number | undefined;

    constructor(data?: IAnonymous9) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.total_amount = data["total_amount"];
        }
    }

    static fromJS(data: any): Anonymous9 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous9();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_amount"] = this.total_amount;
        return data;
    }
}

export interface IAnonymous9 {
    total_amount?: number | undefined;
}

export class Anonymous10 implements IAnonymous10 {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;

    constructor(data?: IAnonymous10) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.item_id = data["item_id"];
            this.name = data["name"];
            this.attributes = data["attributes"];
            this.price = data["price"];
        }
    }

    static fromJS(data: any): Anonymous10 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous10();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item_id"] = this.item_id;
        data["name"] = this.name;
        data["attributes"] = this.attributes;
        data["price"] = this.price;
        return data;
    }
}

export interface IAnonymous10 {
    item_id?: number | undefined;
    name?: string | undefined;
    attributes?: string | undefined;
    price?: string | undefined;
}

export class Anonymous11 implements IAnonymous11 {
    orderId?: number | undefined;

    constructor(data?: IAnonymous11) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.orderId = data["orderId"];
        }
    }

    static fromJS(data: any): Anonymous11 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous11();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderId"] = this.orderId;
        return data;
    }
}

export interface IAnonymous11 {
    orderId?: number | undefined;
}

export class Anonymous12 implements IAnonymous12 {
    order_id?: number | undefined;
    product_id?: number | undefined;
    attributes?: string | undefined;
    product_name?: string | undefined;
    quantity?: number | undefined;
    unit_cost?: string | undefined;
    subtotal?: string | undefined;

    constructor(data?: IAnonymous12) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.order_id = data["order_id"];
            this.product_id = data["product_id"];
            this.attributes = data["attributes"];
            this.product_name = data["product_name"];
            this.quantity = data["quantity"];
            this.unit_cost = data["unit_cost"];
            this.subtotal = data["subtotal"];
        }
    }

    static fromJS(data: any): Anonymous12 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous12();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order_id"] = this.order_id;
        data["product_id"] = this.product_id;
        data["attributes"] = this.attributes;
        data["product_name"] = this.product_name;
        data["quantity"] = this.quantity;
        data["unit_cost"] = this.unit_cost;
        data["subtotal"] = this.subtotal;
        return data;
    }
}

export interface IAnonymous12 {
    order_id?: number | undefined;
    product_id?: number | undefined;
    attributes?: string | undefined;
    product_name?: string | undefined;
    quantity?: number | undefined;
    unit_cost?: string | undefined;
    subtotal?: string | undefined;
}

export class Anonymous13 implements IAnonymous13 {
    order_id?: number | undefined;
    total_amount?: number | undefined;
    created_on?: string | undefined;
    shipped_on?: string | undefined;
    status?: string | undefined;
    name?: string | undefined;

    constructor(data?: IAnonymous13) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.order_id = data["order_id"];
            this.total_amount = data["total_amount"];
            this.created_on = data["created_on"];
            this.shipped_on = data["shipped_on"];
            this.status = data["status"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Anonymous13 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous13();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["order_id"] = this.order_id;
        data["total_amount"] = this.total_amount;
        data["created_on"] = this.created_on;
        data["shipped_on"] = this.shipped_on;
        data["status"] = this.status;
        data["name"] = this.name;
        return data;
    }
}

export interface IAnonymous13 {
    order_id?: number | undefined;
    total_amount?: number | undefined;
    created_on?: string | undefined;
    shipped_on?: string | undefined;
    status?: string | undefined;
    name?: string | undefined;
}

export class Anonymous14 implements IAnonymous14 {
    shipping_region_id?: number | undefined;
    shipping_region?: string | undefined;

    constructor(data?: IAnonymous14) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shipping_region_id = data["shipping_region_id"];
            this.shipping_region = data["shipping_region"];
        }
    }

    static fromJS(data: any): Anonymous14 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous14();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipping_region_id"] = this.shipping_region_id;
        data["shipping_region"] = this.shipping_region;
        return data;
    }
}

export interface IAnonymous14 {
    shipping_region_id?: number | undefined;
    shipping_region?: string | undefined;
}

export class Anonymous15 implements IAnonymous15 {
    shipping_id?: number | undefined;
    shipping_type?: string | undefined;
    shipping_cost?: string | undefined;
    shipping_region_id?: number | undefined;

    constructor(data?: IAnonymous15) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shipping_id = data["shipping_id"];
            this.shipping_type = data["shipping_type"];
            this.shipping_cost = data["shipping_cost"];
            this.shipping_region_id = data["shipping_region_id"];
        }
    }

    static fromJS(data: any): Anonymous15 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous15();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shipping_id"] = this.shipping_id;
        data["shipping_type"] = this.shipping_type;
        data["shipping_cost"] = this.shipping_cost;
        data["shipping_region_id"] = this.shipping_region_id;
        return data;
    }
}

export interface IAnonymous15 {
    shipping_id?: number | undefined;
    shipping_type?: string | undefined;
    shipping_cost?: string | undefined;
    shipping_region_id?: number | undefined;
}

export class Anonymous16 implements IAnonymous16 {
    attribute_id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IAnonymous16) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attribute_id = data["attribute_id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Anonymous16 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous16();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attribute_id"] = this.attribute_id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAnonymous16 {
    attribute_id?: number | undefined;
    name?: string | undefined;
}

export class Anonymous17 implements IAnonymous17 {
    attribute_id?: number | undefined;
    name?: string | undefined;

    constructor(data?: IAnonymous17) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attribute_id = data["attribute_id"];
            this.name = data["name"];
        }
    }

    static fromJS(data: any): Anonymous17 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous17();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attribute_id"] = this.attribute_id;
        data["name"] = this.name;
        return data;
    }
}

export interface IAnonymous17 {
    attribute_id?: number | undefined;
    name?: string | undefined;
}

export class Anonymous18 implements IAnonymous18 {
    attribute_value_id?: number | undefined;
    value?: string | undefined;

    constructor(data?: IAnonymous18) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attribute_value_id = data["attribute_value_id"];
            this.value = data["value"];
        }
    }

    static fromJS(data: any): Anonymous18 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous18();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attribute_value_id"] = this.attribute_value_id;
        data["value"] = this.value;
        return data;
    }
}

export interface IAnonymous18 {
    attribute_value_id?: number | undefined;
    value?: string | undefined;
}

export class Anonymous19 implements IAnonymous19 {
    attribute_name?: string | undefined;
    attribute_value_id?: number | undefined;
    attribute_value?: string | undefined;

    constructor(data?: IAnonymous19) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attribute_name = data["attribute_name"];
            this.attribute_value_id = data["attribute_value_id"];
            this.attribute_value = data["attribute_value"];
        }
    }

    static fromJS(data: any): Anonymous19 {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous19();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attribute_name"] = this.attribute_name;
        data["attribute_value_id"] = this.attribute_value_id;
        data["attribute_value"] = this.attribute_value;
        return data;
    }
}

export interface IAnonymous19 {
    attribute_name?: string | undefined;
    attribute_value_id?: number | undefined;
    attribute_value?: string | undefined;
}

export class Customer2 implements ICustomer2 {
    schema?: Customer | undefined;

    constructor(data?: ICustomer2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.schema = data["schema"] ? Customer.fromJS(data["schema"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Customer2 {
        data = typeof data === 'object' ? data : {};
        let result = new Customer2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema"] = this.schema ? this.schema.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICustomer2 {
    schema?: Customer | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}
